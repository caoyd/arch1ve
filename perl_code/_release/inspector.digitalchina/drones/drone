#!/usr/bin/python
###### AUTHOR           Skipper.D
###### DESCRIPTION      Output only inspect-specific information of
######                  CPU, memory, disk and process.
###### VERSION          v1.2
###### UPDATE           2015/09/07

import os
import sys
import re
import glob

def diskBorder(num):
    for i in range(num):
        sys.stdout.write("-------------------+")#20 char
    sys.stdout.write('\n')

def diskTitle(num):
    for i in range(num):
        sys.stdout.write("      USED   AVAIL |")# 20 char
    sys.stdout.write('\n')

def getPID(key):
    os.chdir('/proc')
    self_pid = os.getpid()
    pids = glob.glob('[0-9]*')
    for p in pids:
        try:
            cmd = open(p+"/cmdline",'r')
        except IOError:
            print "PID PROCESS ERROR :/"
            exit(-1)
        if re.search(key,cmd.readline()) and p != str(self_pid):
            return p
    return 'null'
    cmd.close()

def getPIDPort(pid):
    ports = os.popen("sudo netstat -tlnp | grep "+pid,'r')
    tmp = ports.readline()
    m =  re.search(':([0-9]{1,5})\s',tmp)
    if m:
        port = m.group(1)
        return [pid,port]
    else:
        return [pid,'null']
####################################
###### ALL FUNCTIONS GO ABOVE ######
####################################

###### Output CPU Info ######
try:
    cpu = open("/proc/loadavg","r")
except IOError:
    print "OPEN '/proc/loadavg' ERROR"
    exit(-1)
cpuload = cpu.read()
mod = re.compile('\s[0-9]\/.*')
cpuload = mod.sub('',cpuload).strip('\n')
cpu.close()
print "[ CPU ]"
print '{0:-^39}{1}'.format("+","+")
print '{0:>20}{1:>20}'.format("Current Load |",cpuload+" |")
print '{0:-^39}{1}'.format("+","+")



###### Outpu Memory Info ######
try:
    mem = open("/proc/meminfo","r")
except IOError:
    print "OPEN '/proc/meminfo' ERROR"
    exit(-1)
for item in mem.readlines():
    if "MemTotal" in item:
        mem_total = int(item.strip('\n').split()[1]);
    if "MemFree" in item:
        mem_free = int(item.strip('\n').split()[1]);
    if "SwapTotal" in item:
        swap_total = int(item.strip('\n').split()[1]);
    if "SwapFree" in item:
        swap_free = int(item.strip('\n').split()[1]);
mem_used = mem_total - mem_free
swap_used = swap_total - swap_free
mem.close()
print "[ Memory ]"
print '{0:-^39}{1}'.format("+","+")
print '{0:>20}{1:>20}'.format("Memory(MB) |","Swap(MB) |")
print '{0:-^39}{1}'.format("+","+")
print '{0:>10}{1:>10}{2:>10}{3:>10}'.format("USED","FREE |","USED","FREE |")
print '{0:-^39}{1}'.format("+","+")
print '{0:>10}{1:>10}{2:>10}{3:>10}'.format(mem_used/1024,str(mem_free/1024)+" |",swap_used/1024,str(swap_free/1024)+" |")
print '{0:-^39}{1}'.format("+","+")


###### Outpu Disk Info ######
disk = {}
result = os.popen("df -Th",'r')
for item in result.readlines():
    if re.search(r'ext2|ext3|ext4|xfs',item):
        arr = item.split()
        arr.reverse()
        disk[arr[0]] = [arr[1],arr[2],arr[3]]
result.close()

n = len(disk)
print "[ Disk ]"
diskBorder(n)
for item in sorted(disk.keys()):
    sys.stdout.softspace = 0
    print '{0:>20}'.format(item+" |"),
print ""
diskBorder(n)
diskTitle(n)
diskBorder(n)

for i in sorted(disk.keys()):
    sys.stdout.softspace = 0
    print '{0:>10}{1:>10}'.format(disk[i][0]+"("+disk[i][2]+")",disk[i][1]+" |"),
print ""
diskBorder(n)




###### Output Proc Info(if any) ######
if len(sys.argv) > 1:
    print "[Proc]"
    print '{0:-^39}{1}'.format("+","+")
    print '{0:>20}{1:>10}{2:>10}'.format("Name(keyword) |","PID","Port |")
    print '{0:-^39}{1}'.format("+","+")

    keys = sys.argv[1].split(',')
    for k in keys:
        pid = getPID(k)
        result = getPIDPort(pid)
        print '{0:>18} |{1:>10}{2:>8} |'.format(k,result[0],result[1])
        print '{0:-^39}{1}'.format("+","+")
